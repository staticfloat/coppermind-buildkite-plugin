#!/bin/bash

COPPERMIND_REPO="$( cd "$( dirname "$( dirname "${BASH_SOURCE[0]}" )" )" &> /dev/null && pwd )"
source "${COPPERMIND_REPO}/lib/common.sh"

# Start hashing up our input glob patterns, unless we've already been supplied one by `input_from`
if [[ ! -v "BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH" ]]; then
    INPUT_TREEHASHES=()
    for PATTERN in "${INPUT_PATTERNS[@]}"; do
        INPUT_TREEHASHES+=( "$(collect_glob_pattern "${PATTERN}" | calc_treehash)" )
    done

    # Hash all treehashes together to get full input hash
    export BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH=$(printf "%s" "${INPUT_TREEHASHES[@]}" | calc_shasum)
    buildkite-agent meta-data set "coppermind-${BUILDKITE_STEP_KEY}-inputhash" "${BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH}"
fi

# Get listing of all files that exist with the given prefix
S3_ROOT="s3://${S3_BUCKET}/${S3_PREFIX}/${BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH}"
S3_LISTING=( $((AWS_ACCESS_KEY_ID=${BUILDKITE_S3_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${BUILDKITE_S3_SECRET_ACCESS_KEY} aws s3 ls --recursive "${S3_ROOT}" || true) | awk '{ $1=$2=$3=""; print $0 }' | sed 's/^[ \t]*//') )

if [[ ${#S3_LISTING[@]} -gt 0 ]]; then
    echo "Found ${#S3_LISTING[@]} previously uploaded artifacts"
    if [[ ! -v "BUILDKITE_PLUGIN_COPPERMIND_INPUT_FROM" ]]; then
        export BUILDKITE_PLUGIN_COPPERMIND_SKIP_COMMAND="yes"
    fi

    echo "OUTPUT_PATTERNS: ${OUTPUT_PATTERNS[@]}"
    OUTPUT_GLOB="$(join_by "|" "${OUTPUT_PATTERNS[@]}")"
    echo "OUTPUT_GLOB: ${OUTPUT_GLOB}"
    for URL in "${S3_LISTING[@]}"; do
        echo "URL: ${URL}"
        # If this URL matches any part of our output glob, download it
        FILE_PATH="${URL#s3://${S3_BUCKET}/${S3_PREFIX}/}"
        echo "FILE_PATH: ${FILE_PATH}"
        if [[ "${FILE_PATH}" == @($OUTPUT_GLOB) ]]; then
            echo "Downloading ${FILE_PATH}..."
            AWS_ACCESS_KEY_ID=${BUILDKITE_S3_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${BUILDKITE_S3_SECRET_ACCESS_KEY} aws s3 cp "s3://${S3_BUCKET}/${URL}" .
        fi
    done
elif [[ -v "BUILDKITE_PLUGIN_COPPERMIND_INPUT_FROM" ]]; then
    # If `input_from` was specified, we fail out if we can't find any artifacts
    echo "ERROR: No previously-calculated artifacts found for '${BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH}'"
    buildkite-agent annotate --style error "No previously-calculated artifacts found for '${BUILDKITE_PLUGIN_COPPERMIND_INPUT_HASH}'"
    exit 1
fi
